# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PrivateMessage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, sender_id: int=None, recipient_id: int=None, send_time: datetime=None, read_status: bool=None, contents: str=None):  # noqa: E501
        """PrivateMessage - a model defined in Swagger

        :param id: The id of this PrivateMessage.  # noqa: E501
        :type id: int
        :param sender_id: The sender_id of this PrivateMessage.  # noqa: E501
        :type sender_id: int
        :param recipient_id: The recipient_id of this PrivateMessage.  # noqa: E501
        :type recipient_id: int
        :param send_time: The send_time of this PrivateMessage.  # noqa: E501
        :type send_time: datetime
        :param read_status: The read_status of this PrivateMessage.  # noqa: E501
        :type read_status: bool
        :param contents: The contents of this PrivateMessage.  # noqa: E501
        :type contents: str
        """
        self.swagger_types = {
            'id': int,
            'sender_id': int,
            'recipient_id': int,
            'send_time': datetime,
            'read_status': bool,
            'contents': str
        }

        self.attribute_map = {
            'id': 'id',
            'sender_id': 'senderId',
            'recipient_id': 'recipientId',
            'send_time': 'sendTime',
            'read_status': 'readStatus',
            'contents': 'contents'
        }
        self._id = id
        self._sender_id = sender_id
        self._recipient_id = recipient_id
        self._send_time = send_time
        self._read_status = read_status
        self._contents = contents

    @classmethod
    def from_dict(cls, dikt) -> 'PrivateMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PrivateMessage of this PrivateMessage.  # noqa: E501
        :rtype: PrivateMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this PrivateMessage.

        Unique identifier for the private message  # noqa: E501

        :return: The id of this PrivateMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this PrivateMessage.

        Unique identifier for the private message  # noqa: E501

        :param id: The id of this PrivateMessage.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sender_id(self) -> int:
        """Gets the sender_id of this PrivateMessage.

        Unique identifier for the user that sent the message  # noqa: E501

        :return: The sender_id of this PrivateMessage.
        :rtype: int
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id: int):
        """Sets the sender_id of this PrivateMessage.

        Unique identifier for the user that sent the message  # noqa: E501

        :param sender_id: The sender_id of this PrivateMessage.
        :type sender_id: int
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")  # noqa: E501

        self._sender_id = sender_id

    @property
    def recipient_id(self) -> int:
        """Gets the recipient_id of this PrivateMessage.

        Unique identifier for the user that is recipient of the message  # noqa: E501

        :return: The recipient_id of this PrivateMessage.
        :rtype: int
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id: int):
        """Sets the recipient_id of this PrivateMessage.

        Unique identifier for the user that is recipient of the message  # noqa: E501

        :param recipient_id: The recipient_id of this PrivateMessage.
        :type recipient_id: int
        """
        if recipient_id is None:
            raise ValueError("Invalid value for `recipient_id`, must not be `None`")  # noqa: E501

        self._recipient_id = recipient_id

    @property
    def send_time(self) -> datetime:
        """Gets the send_time of this PrivateMessage.

        The date and time the message was sent  # noqa: E501

        :return: The send_time of this PrivateMessage.
        :rtype: datetime
        """
        return self._send_time

    @send_time.setter
    def send_time(self, send_time: datetime):
        """Sets the send_time of this PrivateMessage.

        The date and time the message was sent  # noqa: E501

        :param send_time: The send_time of this PrivateMessage.
        :type send_time: datetime
        """

        self._send_time = send_time

    @property
    def read_status(self) -> bool:
        """Gets the read_status of this PrivateMessage.

        Status of reading the message  # noqa: E501

        :return: The read_status of this PrivateMessage.
        :rtype: bool
        """
        return self._read_status

    @read_status.setter
    def read_status(self, read_status: bool):
        """Sets the read_status of this PrivateMessage.

        Status of reading the message  # noqa: E501

        :param read_status: The read_status of this PrivateMessage.
        :type read_status: bool
        """

        self._read_status = read_status

    @property
    def contents(self) -> str:
        """Gets the contents of this PrivateMessage.

        Proper contents of the message  # noqa: E501

        :return: The contents of this PrivateMessage.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents: str):
        """Sets the contents of this PrivateMessage.

        Proper contents of the message  # noqa: E501

        :param contents: The contents of this PrivateMessage.
        :type contents: str
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents
