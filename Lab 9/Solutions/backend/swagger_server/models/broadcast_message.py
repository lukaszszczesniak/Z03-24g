# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BroadcastMessage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, sender_id: int=None, send_time: datetime=None, read_by: List[int]=None, contents: str=None):  # noqa: E501
        """BroadcastMessage - a model defined in Swagger

        :param id: The id of this BroadcastMessage.  # noqa: E501
        :type id: int
        :param sender_id: The sender_id of this BroadcastMessage.  # noqa: E501
        :type sender_id: int
        :param send_time: The send_time of this BroadcastMessage.  # noqa: E501
        :type send_time: datetime
        :param read_by: The read_by of this BroadcastMessage.  # noqa: E501
        :type read_by: List[int]
        :param contents: The contents of this BroadcastMessage.  # noqa: E501
        :type contents: str
        """
        self.swagger_types = {
            'id': int,
            'sender_id': int,
            'send_time': datetime,
            'read_by': List[int],
            'contents': str
        }

        self.attribute_map = {
            'id': 'id',
            'sender_id': 'senderId',
            'send_time': 'sendTime',
            'read_by': 'readBy',
            'contents': 'contents'
        }
        self._id = id
        self._sender_id = sender_id
        self._send_time = send_time
        self._read_by = read_by
        self._contents = contents

    @classmethod
    def from_dict(cls, dikt) -> 'BroadcastMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BroadcastMessage of this BroadcastMessage.  # noqa: E501
        :rtype: BroadcastMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this BroadcastMessage.

        Unique identifier for the broadcast message  # noqa: E501

        :return: The id of this BroadcastMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this BroadcastMessage.

        Unique identifier for the broadcast message  # noqa: E501

        :param id: The id of this BroadcastMessage.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sender_id(self) -> int:
        """Gets the sender_id of this BroadcastMessage.

        Unique identifier for the user that sent the message  # noqa: E501

        :return: The sender_id of this BroadcastMessage.
        :rtype: int
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id: int):
        """Sets the sender_id of this BroadcastMessage.

        Unique identifier for the user that sent the message  # noqa: E501

        :param sender_id: The sender_id of this BroadcastMessage.
        :type sender_id: int
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")  # noqa: E501

        self._sender_id = sender_id

    @property
    def send_time(self) -> datetime:
        """Gets the send_time of this BroadcastMessage.

        The date and time the message was sent  # noqa: E501

        :return: The send_time of this BroadcastMessage.
        :rtype: datetime
        """
        return self._send_time

    @send_time.setter
    def send_time(self, send_time: datetime):
        """Sets the send_time of this BroadcastMessage.

        The date and time the message was sent  # noqa: E501

        :param send_time: The send_time of this BroadcastMessage.
        :type send_time: datetime
        """

        self._send_time = send_time

    @property
    def read_by(self) -> List[int]:
        """Gets the read_by of this BroadcastMessage.


        :return: The read_by of this BroadcastMessage.
        :rtype: List[int]
        """
        return self._read_by

    @read_by.setter
    def read_by(self, read_by: List[int]):
        """Sets the read_by of this BroadcastMessage.


        :param read_by: The read_by of this BroadcastMessage.
        :type read_by: List[int]
        """

        self._read_by = read_by

    @property
    def contents(self) -> str:
        """Gets the contents of this BroadcastMessage.

        Proper contents of the message  # noqa: E501

        :return: The contents of this BroadcastMessage.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents: str):
        """Sets the contents of this BroadcastMessage.

        Proper contents of the message  # noqa: E501

        :param contents: The contents of this BroadcastMessage.
        :type contents: str
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents
