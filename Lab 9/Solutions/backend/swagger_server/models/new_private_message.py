# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NewPrivateMessage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, recipient_id: int=None, contents: str=None):  # noqa: E501
        """NewPrivateMessage - a model defined in Swagger

        :param recipient_id: The recipient_id of this NewPrivateMessage.  # noqa: E501
        :type recipient_id: int
        :param contents: The contents of this NewPrivateMessage.  # noqa: E501
        :type contents: str
        """
        self.swagger_types = {
            'recipient_id': int,
            'contents': str
        }

        self.attribute_map = {
            'recipient_id': 'recipientId',
            'contents': 'contents'
        }
        self._recipient_id = recipient_id
        self._contents = contents

    @classmethod
    def from_dict(cls, dikt) -> 'NewPrivateMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewPrivateMessage of this NewPrivateMessage.  # noqa: E501
        :rtype: NewPrivateMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recipient_id(self) -> int:
        """Gets the recipient_id of this NewPrivateMessage.

        Unique identifier for the recipient user  # noqa: E501

        :return: The recipient_id of this NewPrivateMessage.
        :rtype: int
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id: int):
        """Sets the recipient_id of this NewPrivateMessage.

        Unique identifier for the recipient user  # noqa: E501

        :param recipient_id: The recipient_id of this NewPrivateMessage.
        :type recipient_id: int
        """
        if recipient_id is None:
            raise ValueError("Invalid value for `recipient_id`, must not be `None`")  # noqa: E501

        self._recipient_id = recipient_id

    @property
    def contents(self) -> str:
        """Gets the contents of this NewPrivateMessage.

        Proper contents of the message  # noqa: E501

        :return: The contents of this NewPrivateMessage.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents: str):
        """Sets the contents of this NewPrivateMessage.

        Proper contents of the message  # noqa: E501

        :param contents: The contents of this NewPrivateMessage.
        :type contents: str
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents
