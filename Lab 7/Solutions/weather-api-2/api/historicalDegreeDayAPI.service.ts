/**
 * Weatherbit.io - Swagger UI Weather API documentation
 * This is the documentation for the Weatherbit Weather API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 5 day forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/3hourly?city=London`&`country=UK`. See our [Weather API description page](https://www.weatherbit.io/api) for additional documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { EnergyObsGroup } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class HistoricalDegreeDayAPIService {

    protected basePath = 'https://api.weatherbit.io/v2.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Returns multiple locations given a bounding box. 
     * Returns aggregate energy specific historical weather fields, over a specified time period. Supply a bounding box ex: lat1&#x3D;40&amp;lon1&#x3D;-78&amp;lat2&#x3D;38&amp;lon2&#x3D;-80. This API will return UP TO 150 stations, aggregated by the specified time period start_date to end_date. 
     * @param lat1 Latitude of upper left corner.
     * @param lon1 Longitude of upper left corner.
     * @param lat2 Latitude of lower right corner.
     * @param lon2 Longitude of lower right corner.
     * @param startDate Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).
     * @param endDate End Date (YYYY-MM-DD or YYYY-MM-DD:HH).
     * @param key Your registered API key.
     * @param threshold Temperature threshold to use to calculate degree days (default 18 C) 
     * @param units Convert to units. Default Metric See &lt;a target&#x3D;\&#39;blank\&#39; href&#x3D;\&#39;/api/requests\&#39;&gt;units field description&lt;/a&gt;
     * @param callback Wraps return in jsonp callback. Example: callback&#x3D;func
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get(lat1: number, lon1: number, lat2: number, lon2: number, startDate: string, endDate: string, key: string, threshold?: number, units?: 'S' | 'I', callback?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<EnergyObsGroup>;
    public historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get(lat1: number, lon1: number, lat2: number, lon2: number, startDate: string, endDate: string, key: string, threshold?: number, units?: 'S' | 'I', callback?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<EnergyObsGroup>>;
    public historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get(lat1: number, lon1: number, lat2: number, lon2: number, startDate: string, endDate: string, key: string, threshold?: number, units?: 'S' | 'I', callback?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<EnergyObsGroup>>;
    public historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get(lat1: number, lon1: number, lat2: number, lon2: number, startDate: string, endDate: string, key: string, threshold?: number, units?: 'S' | 'I', callback?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (lat1 === null || lat1 === undefined) {
            throw new Error('Required parameter lat1 was null or undefined when calling historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get.');
        }
        if (lon1 === null || lon1 === undefined) {
            throw new Error('Required parameter lon1 was null or undefined when calling historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get.');
        }
        if (lat2 === null || lat2 === undefined) {
            throw new Error('Required parameter lat2 was null or undefined when calling historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get.');
        }
        if (lon2 === null || lon2 === undefined) {
            throw new Error('Required parameter lon2 was null or undefined when calling historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get.');
        }
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get.');
        }
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling historyEnergyBboxlat1lat1lon1lon1lat2lat2lon2lon2Get.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'start_date');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'end_date');
        }
        if (threshold !== undefined && threshold !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>threshold, 'threshold');
        }
        if (units !== undefined && units !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>units, 'units');
        }
        if (callback !== undefined && callback !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>callback, 'callback');
        }
        if (key !== undefined && key !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>key, 'key');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<EnergyObsGroup>(`${this.configuration.basePath}/history/energy/bbox?lat1=${encodeURIComponent(String(lat1))}&lon1=${encodeURIComponent(String(lon1))}&lat2=${encodeURIComponent(String(lat2))}&lon2=${encodeURIComponent(String(lon2))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns Energy API response  - Given a single lat/lon. 
     * Returns aggregate energy specific historical weather fields, over a specified time period.
     * @param lat Latitude component of location.
     * @param lon Longitude component of location.
     * @param startDate Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).
     * @param endDate End Date (YYYY-MM-DD or YYYY-MM-DD:HH).
     * @param key Your registered API key.
     * @param tp Time period to aggregate by (daily, monthly)
     * @param threshold Temperature threshold to use to calculate degree days (default 18 C) 
     * @param units Convert to units. Default Metric See &lt;a target&#x3D;\&#39;blank\&#39; href&#x3D;\&#39;/api/requests\&#39;&gt;units field description&lt;/a&gt;
     * @param callback Wraps return in jsonp callback. Example: callback&#x3D;func
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public historyEnergylatlatlonlonGet(lat: number, lon: number, startDate: string, endDate: string, key: string, tp?: 'hourly' | 'daily' | 'monthly', threshold?: number, units?: 'S' | 'I', callback?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<EnergyObsGroup>;
    public historyEnergylatlatlonlonGet(lat: number, lon: number, startDate: string, endDate: string, key: string, tp?: 'hourly' | 'daily' | 'monthly', threshold?: number, units?: 'S' | 'I', callback?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<EnergyObsGroup>>;
    public historyEnergylatlatlonlonGet(lat: number, lon: number, startDate: string, endDate: string, key: string, tp?: 'hourly' | 'daily' | 'monthly', threshold?: number, units?: 'S' | 'I', callback?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<EnergyObsGroup>>;
    public historyEnergylatlatlonlonGet(lat: number, lon: number, startDate: string, endDate: string, key: string, tp?: 'hourly' | 'daily' | 'monthly', threshold?: number, units?: 'S' | 'I', callback?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (lat === null || lat === undefined) {
            throw new Error('Required parameter lat was null or undefined when calling historyEnergylatlatlonlonGet.');
        }
        if (lon === null || lon === undefined) {
            throw new Error('Required parameter lon was null or undefined when calling historyEnergylatlatlonlonGet.');
        }
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling historyEnergylatlatlonlonGet.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling historyEnergylatlatlonlonGet.');
        }
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling historyEnergylatlatlonlonGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (startDate !== undefined && startDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>startDate, 'start_date');
        }
        if (endDate !== undefined && endDate !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>endDate, 'end_date');
        }
        if (tp !== undefined && tp !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>tp, 'tp');
        }
        if (threshold !== undefined && threshold !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>threshold, 'threshold');
        }
        if (units !== undefined && units !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>units, 'units');
        }
        if (callback !== undefined && callback !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>callback, 'callback');
        }
        if (key !== undefined && key !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>key, 'key');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<EnergyObsGroup>(`${this.configuration.basePath}/history/energy?lat=${encodeURIComponent(String(lat))}&lon=${encodeURIComponent(String(lon))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
